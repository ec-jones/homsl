forall (k : i -> i). 
    Ready (k S) => Untracked (Socket k);
forall (k : i -> i).
    Untracked (k U) => Untracked (Socket k);
forall (k : i -> i).
    Ready (k U) => Ready (Socket k) ;
forall (k : i -> i).
    Bound (k U) => Bound (Socket k);
forall (k : i -> i).
    Listening (k U) => Listening (Socket k);
forall (k : i -> i).
    Open (k U) => Open (Socket k);
forall (k : i -> i).
    Close (k U) => Close (Socket k);

forall (soc : i) (k : i). 
    Untracked k => Untracked (Bind k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Ready k => Ready (Bind k soc);
forall (soc : i) (k : i). 
    IsS soc /\ Bound k => Ready (Bind k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Bound k => Bound (Bind k soc);
forall (soc : i) (k : i). 
    IsS soc => Bound (Bind k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Listening k => Listening (Bind k soc);
forall (soc : i) (k : i). 
    IsS soc => Listening (Bind k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Open k => Open (Bind k soc);
forall (soc : i) (k : i). 
    IsS soc => Open (Bind k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Close k => Close (Bind k soc);
forall (soc : i) (k : i). 
    IsS soc => Close (Bind k soc);

forall (soc : i) (k : i). 
    Untracked k => Untracked (Connect k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Ready k => Ready (Connect k soc);
forall (soc : i) (k : i). 
    IsS soc /\ Open k => Ready (Connect k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Bound k => Bound (Connect k soc);
forall (soc : i) (k : i). 
    IsS soc => Bound (Connect k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Listening k => Listening (Connect k soc);
forall (soc : i) (k : i). 
    IsS soc => Listening (Connect k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Open k => Open (Connect k soc);
forall (soc : i) (k : i). 
    IsS soc => Open (Connect k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Close k => Close (Connect k soc);
forall (soc : i) (k : i). 
    IsS soc => Close (Connect k soc);

forall (soc : i) (k : i). 
    Untracked k => Untracked (Listen k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Ready k => Ready (Listen k soc);
forall (soc : i) (k : i). 
    IsS soc => Ready (Listen k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Bound k => Bound (Listen k soc);
forall (soc : i) (k : i). 
    IsS soc /\ Listening k => Bound (Listen k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Listening k => Listening (Listen k soc);
forall (soc : i) (k : i). 
    IsS soc => Listening (Listen k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Open k => Open (Listen k soc);
forall (soc : i) (k : i). 
    IsS soc => Open (Listen k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Close k => Close (Listen k soc);
forall (soc : i) (k : i). 
    IsS soc => Close (Listen k soc);

forall (soc : i) (k : i -> i). 
    Untracked (k U) => Untracked (Accept k soc);
forall (soc : i) (k : i -> i). 
    Open (k S) => Untracked (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsU soc => Ready (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsU soc /\ Bound (k U) => Bound (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsS soc => Bound (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsU soc /\ Listening (k U) => Listening (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsS soc /\ Listening (k U) => Listening (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsU soc /\ Open (k U) => Open (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsS soc => Open (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsU soc /\ Close (k U) => Close (Accept k soc);
forall (soc : i) (k : i -> i). 
    IsS soc => Close (Accept k soc);

forall (soc : i) (k : i). 
    Untracked k => Untracked (Send k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Ready k => Ready (Send k soc);
forall (soc : i) (k : i). 
    IsS soc => Ready (Send k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Bound k => Bound (Send k soc);
forall (soc : i) (k : i). 
    IsS soc => Bound (Send k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Listening k => Listening (Send k soc);
forall (soc : i) (k : i). 
    IsS soc => Listening (Send k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Open k => Open (Send k soc);
forall (soc : i) (k : i). 
    IsS soc /\ Open k => Open (Send k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Close k => Close (Send k soc);
forall (soc : i) (k : i). 
    IsS soc => Close (Send k soc);

forall (soc : i) (k : i). 
    Untracked k => Untracked (Receive k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Ready k => Ready (Receive k soc);
forall (soc : i) (k : i). 
    IsS soc => Ready (Receive k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Bound k => Bound (Receive k soc);
forall (soc : i) (k : i). 
    IsS soc => Bound (Receive k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Listening k => Listening (Receive k soc);
forall (soc : i) (k : i). 
    IsS soc => Listening (Receive k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Open k => Open (Receive k soc);
forall (soc : i) (k : i). 
    IsS soc /\ Open k => Open (Receive k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Close k => Close (Receive k soc);
forall (soc : i) (k : i). 
    IsS soc => Close (Receive k soc);

forall (soc : i) (k : i). 
    Untracked k => Untracked (Close k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Ready k => Ready (Close k soc);
forall (soc : i) (k : i). 
    IsS soc => Ready (Close k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Bound k => Bound (Close k soc);
forall (soc : i) (k : i). 
    IsS soc => Bound (Close k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Listening k => Listening (Close k soc);
forall (soc : i) (k : i). 
    IsS soc => Listening (Close k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Open k => Open (Close k soc);
forall (soc : i) (k : i). 
    IsS soc /\ Close k => Open (Close k soc);
forall (soc : i) (k : i). 
    IsU soc /\ Close k => Close (Close k soc);
forall (soc : i) (k : i). 
    IsS soc => Close (Close k soc);

forall (k1 : i) (k2 : i). 
    Untracked k1 => Untracked (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Untracked k2 => Untracked (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Ready k1 => Ready (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Ready k2 => Ready (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Bound k1 => Bound (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Bound k2 => Bound (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Listening k1 => Listening (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Listening k2 => Listening (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Close k1 => Close (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Close k2 => Close (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Open k1 => Open (Branch k1 k2);
forall (k1 : i) (k2 : i). 
    Open k2 => Open (Branch k1 k2);

IsS S;
IsU U;