/*** Taken from the extended version of POPL09 paper ***/
/*** 
 *** let l1 = newlock() in
 *** let rel1 x = unlock(l1) in
 *** let acq1 x = lock(l1) in
 *** let rec f g =
 ***   if * then g()
 ***   else
 ***    let l2 = newlock() in
 ***    let rel2 x = unlock(l2) in
 ***    let acq2 x = lock(l2) in
 ***      (acq2(); f rel2; g())
 *** in
 ***   (acq1(); f rel1)
 ***/

%BEGING  
S = NewL C1.
C1 x = C2 (Unlock x) (Lock x).
C2 h1 h2 = h2(F h1 end).
F g k = br (g k) (NewL (C3 g k)).
C3 g k x = C4 g (Unlock x) (Lock x) k.
C4 g h1 h2 k = h2(F h1 (g k)).
NewL k = br (newl (k I)) (k K).
I x = i x.
K x = k x.
Unlock x k = x (unlock k).
Lock x k = x (lock k).
/** rule size: 79 **/
%ENDG

%BEGINA
q0 br -> q0 q0.
q0 k -> q0k.
q0k lock -> q0.
q0k unlock -> q0.
qany k -> qany.
qany i -> qany.
q1 br -> q1 q1.
q2 br -> q2 q2.
qany br -> qany qany.
q0 newl -> q1.
q1 newl -> qany.
q2 newl -> qany.
qany lock -> qany.
qany newl -> qany.
qany unlock -> qany.
qany end -> .
q1 i -> q11.
q1 k -> q1k.
q11 lock -> q2.
q1k lock -> q1.
q1k unlock -> q1.
q2 i -> q21.
q2 k -> q2k.
q21 unlock -> q1.
q2k lock -> q2.
q2k unlock -> q2.
q0 end -> .
q1 end -> .
%ENDA
